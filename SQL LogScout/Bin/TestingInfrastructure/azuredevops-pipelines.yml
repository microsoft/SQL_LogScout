# # Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

# The `resources` specify the location and version of the 1ES PT.
resources:
  repositories:
  - repository: 1esPipelines
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release

extends:
  # The pipeline extends the 1ES PT which will inject different SDL and compliance tasks.
  # For non-production pipelines, use "Unofficial" as defined below.
  # For productions pipelines, use "Official".
  template: v1/1ES.Official.PipelineTemplate.yml@1esPipelines
  parameters:
    # Update the pool with your team's 1ES hosted pool.
    pool:
      name: MSSecurity-1ES-Build-Agents-Pool  # Name of your hosted pool
      image:   # Name of the image in your pool. If not specified, first image of the pool is used
      os: windows  # OS of the image. This value cannot be a variable. Allowed values: windows, linux, macOS
    stages:
    - stage: Stage
      jobs:
      - job: ValidationTestsJob
        # If the pipeline publishes artifacts, use `templateContext` to define the artifacts.
        # This will enable 1ES PT to run SDL analysis tools on the artifacts and then upload them.
        templateContext:
          outputs:
          - output: pipelineArtifact
            targetPath: $(Build.ArtifactStagingDirectory)
            artifactName: DiagManagerPipelineArtifacts
        # Define the steps that the pipeline will run.
        # In most cases, copy and paste the steps from the original pipeline.
        steps:
        - script: echo Start Pipeline!
          displayName: 'Run a one-line script'

        # # these security tasks are now injected by 1ES template
        # - task: PSScriptAnalyzer@1
        #   inputs:
        #     Path: '$(Build.SourcesDirectory)'
        #     Settings: 'required'
        #     Recurse: true

        # - task: AntiMalware@4
        #   inputs:
        #     InputType: 'Basic'
        #     ScanType: 'CustomScan'
        #     FileDirPath: '$(Build.StagingDirectory)'
        #     TreatSignatureUpdateFailureAs: 'Warning'
        #     SignatureFreshness: 'UpToDate'
        #     TreatStaleSignatureAs: 'Error'

        # - task: ComponentGovernanceComponentDetection@0
        #   inputs:
        #     scanType: 'Register'
        #     verbosity: 'Verbose'
        #     alertWarningLevel: 'High'

        # - task: CredScan@3

        # - task: Guardian@1
        #   inputs:
        #     break: true

        # - task: PostAnalysis@2
        #   inputs:
        #   GdnBreakAllTools: true
            
        - task: ManifestGeneratorTask@0
          inputs:
            BuildDropPath: '$(Build.ArtifactStagingDirectory)'

        # for now disabling publish artifacts task
        #- task: PublishPipelineArtifact@1
        #  inputs:
        #    targetPath: '$(Pipeline.Workspace)/a/_manifest/spdx_2.2'
        #    artifact: 'PipelineArtifacts'
        #    publishLocation: 'pipeline'
        - task: PowerShell@2
          displayName: Version check - Powershell and .NET Framework
          inputs:
            targetType: 'inline'
            script: |
              Write-Host "PowerShell version:"
              $PSVersionTable.PSVersion
              Write-Host "-----------------------------"
              $release = Get-ItemPropertyValue -LiteralPath 'HKLM:SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Full' -Name Release
              switch ($release) {
                  { $_ -ge 533320 } { $version = '4.8.1 or later'; break }
                  { $_ -ge 528040 } { $version = '4.8'; break }
                  { $_ -ge 461808 } { $version = '4.7.2'; break }
                  { $_ -ge 461308 } { $version = '4.7.1'; break }
                  { $_ -ge 460798 } { $version = '4.7'; break }
                  { $_ -ge 394802 } { $version = '4.6.2'; break }
                  { $_ -ge 394254 } { $version = '4.6.1'; break }
                  { $_ -ge 393295 } { $version = '4.6'; break }
                  { $_ -ge 379893 } { $version = '4.5.2'; break }
                  { $_ -ge 378675 } { $version = '4.5.1'; break }
                  { $_ -ge 378389 } { $version = '4.5'; break }
                  default { $version = $null; break }
              }
              
              if ($version) {
                  Write-Host -Object ".NET Framework Version: $version"
              } else {
                  Write-Host -Object '.NET Framework Version 4.5 or later is not detected.'
              }

        - task: CmdLine@2
          displayName: Install Nexus Prerequisites
          inputs:
            script: |

              echo Downloading Nexus prerequisites...
              :: curl.exe --output .\sqlnexus_prerequisites\SQLSysClrTypes.msi --create-dirs --url https://download.microsoft.com/download/B/1/7/B1783FE9-717B-4F78-A39A-A2E27E3D679D/ENU/x64/SQLSysClrTypes.msi

              :: curl.exe --output .\sqlnexus_prerequisites\ReportViewer.msi --url https://download.microsoft.com/download/B/1/7/B1783FE9-717B-4F78-A39A-A2E27E3D679D/ENU/x86/ReportViewer.msi

              curl.exe -L --output .\sqlnexus_prerequisites\RMLSetup.msi --create-dirs --url https://aka.ms/get-rmlutils

              echo:
              cd sqlnexus_prerequisites
              dir

              echo: 
              :: echo Installing CLR types...
              :: SQLSysClrTypes.msi -passive

              echo Installing RML Utilities...
              RMLSetup.msi -passive

              :: echo Installing Report Viewer Control...
              :: ReportViewer.msi -passive

              echo:
              echo Testing ReadTrace...
              "C:\Program Files\Microsoft Corporation\RMLUtils\ReadTrace.exe" /? & echo:
              if %ERRORLEVEL% equ 9009 echo Could not find ReadTrace.exe, listing directory for user verification: & echo: & dir "C:\Program Files\Microsoft Corporation\RMLUtils" & exit 100001
              if %ERRORLEVEL% equ -6 echo RML Utilities installed successfully!

              :: echo:
              :: echo Checking SQL CLR Types...
              :: if exist C:\Windows\System32\SqlServerSpatial130.dll echo SQL CLR Types installed successfully!
              :: if NOT exist C:\Windows\System32\SqlServerSpatial130.dll echo SQL CLR Types not found! & exit 100002

              :: echo:
              :: echo Checking ReportViewer...
              :: if exist C:\Windows\Microsoft.NET\assembly\GAC_MSIL\Microsoft.ReportViewer.Common.resources\v4.0_13.0.0.0_es_89845dcd8080cc91\Microsoft.ReportViewer.Common.resources.dll echo Resource Viewer installed successfully!
              :: if NOT exist C:\Windows\Microsoft.NET\assembly\GAC_MSIL\Microsoft.ReportViewer.Common.resources\v4.0_13.0.0.0_es_89845dcd8080cc91\Microsoft.ReportViewer.Common.resources.dll echo Resource Viewer not found! & exit 100003

              echo:
              cd ..
              echo Downloading SQL Nexus latest binaries...
              curl.exe -L --output .\sqlnexus\SQLNexusBuild.zip --create-dirs --url https://aka.ms/get-sqlnexus

        - task: ExtractFiles@1
          displayName: Extract Nexus Zip
          inputs:
            archiveFilePatterns: '.\sqlnexus\SQLNexusBuild.zip'
            destinationFolder: '.\sqlnexus'
            cleanDestinationFolder: false
            overwriteExistingFiles: false

        - task: CmdLine@2
          displayName: Install Nexus
          inputs:
            script: |
              echo Listing Nexus directory...
              cd sqlnexus
              dir
              echo ##vso[task.setvariable variable=NexusDir;]%CD%

              echo Testing Nexus...
              sqlnexus.exe /? & echo:
              if %ERRORLEVEL% neq -1 echo Failed to call sqlnexus.exe & exit 100004
              if %ERRORLEVEL% equ -1 echo SQL Nexus has installed successfully! & (call )


        - task: CmdLine@2
          displayName: Install SQL Server and test a connection
          inputs:
            script: |
                    time /t

                    echo $(NexusDir) == NexusDir
                    
                    echo ========================================================================================
                    echo Downloading SQL Express...
                    curl.exe https://download.microsoft.com/download/7/f/8/7f8a9c43-8c8a-4f7c-9f92-83c18d96b681/SQL2019-SSEI-Expr.exe --output .\SQL2019-SSEI-Expr.exe --silent
                
                
                    echo List current folder content
                    dir
                    
                    echo ========================================================================================
                    echo Installing SQL Express. Wait for install to finish...
                    start /wait  .\SQL2019-SSEI-Expr.exe /Action=Install /Language=en-US /ENU /HideProgressBar /IAcceptSqlServerLicenseTerms /InstallPath="c:\Program Files\Microsoft SQL Server" /Quiet
                    echo SQL Express installation finished!

                    setx /M PATH "%PATH%;c:\Program Files\Microsoft SQL Server\Client SDK\ODBC\170\Tools\Binn\"
                    
                    echo ========================================================================================
                    echo Connect to SQL Server and run a test query
                    sqlcmd -S.\sqlexpress -Q "set nocount on; SELECT @@version; SELECT @@servername"
                    date /t & time /t

        - task: PowerShell@2
          displayName: Print Nexus Log
          inputs:
            targetType: 'inline'
            script: 'Get-ChildItem -Path "$env:temp\sqlnexus*" | Sort-Object -Property LastWriteTime -Descending | Select-Object -First 1 | Get-Content | Where-Object {$_.Contains("ReadTrace") }'

        # - task: PowerShell@2
        #   displayName: Print ReadTrace Log
        #   inputs:
        #     targetType: 'inline'
        #     script: 'Get-ChildItem -Path "$env:temp\rml\ReadTrace.log" | Sort-Object -Property LastWriteTime -Descending | Select-Object -First 1 | Get-Content'

        - task: CmdLine@2
          displayName: Run LogScout Test Suite
          inputs:
            script: |
                    time /t
                    sqlcmd -S.\sqlexpress -Q "set nocount on; SELECT @@version; SELECT @@servername; SELECT * FROM sys.databases"
                    echo NexusDir: $(NexusDir) 

                    
                    echo ========================================================================================
                    echo Starting SQL LogScout test...
                    date /t & time /t
                    cd .\Bin\TestingInfrastructure
                    powershell -File .\ConsistentQualityTests.ps1 -ServerName ".\sqlexpress" -Scenarios "Basic" -SqlNexusPath $(NexusDir) -SqlNexusDb "SqlNexusDB" -RunDuration 2.5 
                    IF %ERRORLEVEL% GTR 0 echo ##[error]Test failed with errorlevel %ERRORLEVEL% && exit 1

                    timeout /T 5

                    powershell -File .\ConsistentQualityTests.ps1 -ServerName ".\sqlexpress" -Scenarios "GeneralPerf" -SqlNexusPath $(NexusDir) -SqlNexusDb "SqlNexusDB" -RunDuration 2.5
                    IF %ERRORLEVEL% GTR 0 echo ##[error]Test failed with errorlevel %ERRORLEVEL% && exit 1

                    powershell -File .\ConsistentQualityTests.ps1 -ServerName ".\sqlexpress" -Scenarios "DetailedPerf+NoBasic" -SqlNexusPath $(NexusDir) -SqlNexusDb "SqlNexusDB" -RunDuration 2.5
                    IF %ERRORLEVEL% GTR 0 echo ##[error]Test failed with errorlevel %ERRORLEVEL% && exit 1
                    
                    powershell -File .\ConsistentQualityTests.ps1 -ServerName ".\sqlexpress" -Scenarios "LightPerf" -SqlNexusPath $(NexusDir) -SqlNexusDb "SqlNexusDB" -RunDuration 2.5
                    IF %ERRORLEVEL% GTR 0 echo ##[error]Test failed with errorlevel %ERRORLEVEL% && exit 1
                    
                    powershell -File .\ConsistentQualityTests.ps1 -ServerName ".\sqlexpress" -Scenarios "Memory" -SqlNexusPath $(NexusDir) -SqlNexusDb "SqlNexusDB" -RunDuration 2.5
                    IF %ERRORLEVEL% GTR 0 echo ##[error]Test failed with errorlevel %ERRORLEVEL% && exit 1

                    # powershell -File .\ConsistentQualityTests.ps1 -ServerName ".\sqlexpress" -Scenarios "AlwaysOn" -SqlNexusPath $(NexusDir) -SqlNexusDb "SqlNexusDB" -RunDuration 2.5
                    # IF %ERRORLEVEL% GTR 0 echo ##[error]Test failed with errorlevel %ERRORLEVEL% && exit 1

                    powershell -File .\ConsistentQualityTests.ps1 -ServerName ".\sqlexpress" -Scenarios "NetworkTrace+NoBasic" -SqlNexusPath $(NexusDir) -SqlNexusDb "SqlNexusDB" -RunDuration 2.5
                    IF %ERRORLEVEL% GTR 0 echo ##[error]Test failed with errorlevel %ERRORLEVEL% && exit 1
                    
                    powershell -File .\ConsistentQualityTests.ps1 -ServerName ".\sqlexpress" -Scenarios "IO" -SqlNexusPath $(NexusDir) -SqlNexusDb "SqlNexusDB" -RunDuration 2.5
                    IF %ERRORLEVEL% GTR 0 echo ##[error]Test failed with errorlevel %ERRORLEVEL% && exit 1

                    powershell -File .\ConsistentQualityTests.ps1 -ServerName ".\sqlexpress" -Scenarios "BackupRestore+NoBasic" -SqlNexusPath $(NexusDir) -SqlNexusDb "SqlNexusDB" -RunDuration 2.5
                    IF %ERRORLEVEL% GTR 0 echo ##[error]Test failed with errorlevel %ERRORLEVEL% && exit 1

                    powershell -File .\ConsistentQualityTests.ps1 -ServerName ".\sqlexpress" -Scenarios "Replication" -SqlNexusPath $(NexusDir) -SqlNexusDb "SqlNexusDB" -RunDuration 2.5
                    IF %ERRORLEVEL% GTR 0 echo ##[error]Test failed with errorlevel %ERRORLEVEL% && exit 1

                    powershell -File .\ConsistentQualityTests.ps1 -ServerName ".\sqlexpress" -Scenarios "Setup" -SqlNexusPath $(NexusDir) -SqlNexusDb "SqlNexusDB" -RunDuration 2.5
                    IF %ERRORLEVEL% GTR 0 echo ##[error]Test failed with errorlevel %ERRORLEVEL% && exit 1
                    
                    powershell -File .\ConsistentQualityTests.ps1 -ServerName ".\sqlexpress" -Scenarios "ServiceBrokerDBMail" -RunDuration 2.5
                    IF %ERRORLEVEL% GTR 0 echo ##[error]Test failed with errorlevel %ERRORLEVEL% && exit 1
                    
                    powershell -File .\ConsistentQualityTests.ps1 -ServerName ".\sqlexpress" -Scenarios "NeverEndingQuery" -SqlNexusPath $(NexusDir) -SqlNexusDb "SqlNexusDB" -RunDuration 2.5
                    IF %ERRORLEVEL% GTR 0 echo ##[error]Test failed with errorlevel %ERRORLEVEL% && exit 1